1. 请简述 JVM 垃圾回收原理。
2.设计一个秒杀系统，主要的挑战和问题有哪些？核心的架构方案或者思路有哪些？
 
垃圾是死亡的对象所占据的堆空间
垃圾回收，就是将已经分配的空间，但是不再使用的内存回收回来，以便再次分配
jvm 的垃圾回收器采取的是可达性分析算法，来标识对象是否需要回收。
算法实质就是将一系列GC Roots作为初始的存活对象合集，
其中GC Roots 可以理解为堆外指向堆内的引用，
从该合集出发，探索所有的能够被该集合引用的对象，
并将其加入到该集合中，这个过程为标记。
最后未被探索到的对象就是死亡的，是可以回收的。

Eden区空间消耗完，触发一次Minor GC,来收集新生代的垃圾
新生代共有两个Survivor区，我们分别用from和to来指代，
其中to指向的Survivor区是空的
在Minor GC时，Eden区和from指向的Survivor区中的存活对象会被复制
到to指向的Survivor区中，然后交换from 和to指针，以保证下一次Minor GC 时，
to  指向的Survivor还是空的。
JVM  会记录Survivor中的对象一共被来回复制了几次，
如果对象被复制的次数为15，该对象将被晋升为老年代，
如果单个Survivor区已经被占用了50% ，较高复制次数的对象
也会晋升到老年代。
理想状态下，应该Eden区的对象基本都死亡了，那么需要复制的数据非常少。


挑战和问题
系统层面： 对于百万级别的请求流量不出故障
数据一致性：在高并发情况下如何保持
在资源限制下，如何应对数百上千的并发访问

思路;
1.减少用户的请求数据
2.页面请求的数量尽量少
3.减少用户请求到返回数据的整个链路的过程所经过的中间节点数
4.减少单请求所依赖的服务数量
5.不要有系统单点，消除单点

方案;
1.将热点数据放到缓存系统中，提高读性能
2，将页面进行动静分离，减少页面刷新的数据
3. 服务端对秒杀商品进行本地缓存，减少系统调用
4.增加系统限流保护
