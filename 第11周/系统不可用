导致系统不可用的原因有哪些？保障系统稳定高可用的方案有哪些？请分别列举并简述。

无计划的故障：
 
系统级故障，包括主机、操作系统、中间件、数据库、网络、电源以及外围设备。
数据和中介的故障，包括人员误操作、硬盘故障、数据乱了
。还有自然灾害、人为破坏，以及供电问题等

有计划的故障
日常任务：备份，容量规划，用户和安全管理，后台批处理应用。
运维相关：数据库维护、应用维护、中间件维护、操作系统维护、网络维护。
升级相关：数据库、应用、中间件、操作系统、网络，包括硬件升级。

故障分类如下：
网络问题。网络链接出现问题，网络带宽出现拥塞……
性能问题。数据库慢 SQL、Java Full GC、硬盘 IO 过大、CPU 飙高、内存不足……
安全问题。被网络攻击，如 DDoS 等。
运维问题。系统总是在被更新和修改，架构也在不断地被调整，监控问题……
管理问题。没有梳理出关键服务以及服务的依赖关系，运行信息没有和控制系统同步……
硬件问题。硬盘损坏、网卡出问题、交换机出问题、机房掉电、挖掘机问题

高可用系统设计的思路
冗余服务，服务解耦，服务容错
系统设计角度
1 failover（故障转移）
在客户端上定期地向主节点发送心跳包，也可以从备份节点上定期发送心跳包。当一段时间内未收到心跳包，就可以认为主节点已经发生故障，可以触发选主的操作。
2 超时控制
收集系统之间的调用日志，统计比如说 99% 的响应时间是怎样的，然后依据这个时间来指定超时时间
3 降级是为了保证核心服务的稳定而牺牲非核心服务的做法
4 限流完全是另外一种思路，它通过对并发的请求进行限速来保护系统
5. 故障隔离设计     策略 包括 集群隔离、机房隔离、线程级隔离、进程级隔离和资源隔离策略
6.
系统运维角度
灰度发布 给了开发和运维  在线上流量上观察变更带来的影响，是保证系统高可用的重要关卡。
故障演练    对系统进行一些破坏性的手段，观察在出现局部故障时，整体的系统表现是怎样的，从而发现系统中存在的，潜在的可用性问题
